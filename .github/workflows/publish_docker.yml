
name: Multi-platform Docker Image Push

###
# Description:
# This workflow builds and pushes Docker images for multiple architectures using GitHub Actions. It builds both the supervisord and systemd images. There are quite a bit of non-obvious steps in this workflow, so here is a brief description of some of the important pieces:
#  - One way to build multi-arch images is to use something called QEMU. This allows you to run a different architecture on a host machine different from the target architecture. This does not work consistently in GitHub actions, so we use a different approach. We build the images on the target architecture using a different runner for each architecture. This is done using the 'runs-on' property in the matrix and an image using the target architecture.
#  - Because we build each image in different containers, we cannot push them all to the same tag as they will overwrite each other. Instead on the initial build we have to include the architecture in the tag name.
#  - We ultimately want one tag the users can pull the image from independent of architecture. The way docker publishes an image with multiple architectures is to create a manifest file. This is a special type of image that contains references to other images and information about which platform is supported by the referenced images. The manifest is created in a separate job after the images are built and pushed. The manifest is created using the docker manifest command.
#
# See the comments in the remainder of the file for more details on each step.
###

##
# Controls when the workflow will run
on:
  push:
    # Run on pushes to any branch
    branches: [ '*' ]
    # Run when a tag starting with 'v' is pushed
    tags: [ 'v*.*.*' ]
  pull_request:
    # Run on pull requests to the master branch
    branches: [ 'master' ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

##
# Global variables
env:
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_BASE: 'perfsonar/testpoint'
  BUILD_DIR: .

##
# The jobs to run that build and push the Docker images
jobs:
  # build: This job builds the supervisord and systemd images for multiple architectures. 
  #  It pushes the images to the registry with separate tags for each architecture.
  build:
    # A single dimensional matrix that loops through the different platforms.
    strategy:
      matrix:
        platform: [ linux/amd64, linux/arm64 ]
        # This 'include' section keeps the matrix single dimensional, but allows us to set additional properties for each item
        include:
          - platform: linux/amd64
            runs_on: ubuntu-latest
            suffix_tag: amd64
          - platform: linux/arm64
            runs_on: ubuntu-24.04-arm
            suffix_tag: arm64
    # Runs-on set using a matrix variable since each architecture needs to run on an image using the same architecture as the target platform
    runs-on: ${{ matrix.runs_on }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checkout the code from this repository
    - uses: actions/checkout@v3
    # Setup docker buildx in this container
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Login against a Docker registry except on PR
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Extract Docker metadata to be used in supervisord image. This primarily calculates the image tags and labels based on branch name, tag name, etc
    # Note that the tag at this phase includes the architecture name so that different architectures don't collide.
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}
        flavor: |
            latest=false
        tags: |
          type=schedule,suffix=-${{ matrix.suffix_tag }}
          type=ref,event=branch,suffix=-${{ matrix.suffix_tag }}
          type=ref,event=tag,suffix=-${{ matrix.suffix_tag }}
          type=ref,event=pr,suffix=-${{ matrix.suffix_tag }}
          type=raw,value=latest-${{ matrix.suffix_tag }},enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

    # Extract Docker metadata to be used in systemd image. This primarily calculates the image tags and labels based on branch name, tag name, etc
    # Note that the tag at this phase includes the architecture name so that different architectures don't collide.
    - name: Extract Systemd Docker metadata
      id: metasysd
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}
        flavor: |
            latest=false
        tags: |
          type=schedule,suffix=-systemd-${{ matrix.suffix_tag }}
          type=ref,event=branch,suffix=-systemd-${{ matrix.suffix_tag }}
          type=ref,event=tag,suffix=-systemd-${{ matrix.suffix_tag }}
          type=ref,event=pr,suffix=-systemd-${{ matrix.suffix_tag }}
          type=raw,value=systemd-${{ matrix.suffix_tag }},enable=${{ github.ref == format('refs/heads/{0}', 'master') }}

    # Build and push Docker image with Buildx (don't push on PR)
    # Note the 'provenance: false' option is set to prevent attestations from being created. Attestations leads to a manifest being created with some unhelpful features in our context:
    #  - The manifest created references the single arcitecture built and then has another reference to an "unkown/unkown" architecture. Not sure what it does, but at the very least it causes confusion.
    #  - A much bigger reason is that it prevents our abilty to create a multi-arch manifest in later steps since you can't create a manifest from another manifest
    # https://github.com/docker/build-push-action
    - name: Build and push Docker images
      id: build-and-push
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.BUILD_DIR }}
        file: ${{ env.BUILD_DIR }}/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        provenance: false
        platforms: ${{ matrix.platform }}

    # Build and push systemd images. Same notes apply as for supervisord image above with regard to multi-arch push.
    - name: Build and push Systemd Docker images
      id: build-and-push-systemd
      uses: docker/build-push-action@v6
      with:
        context: ${{ env.BUILD_DIR }}
        file: ${{ env.BUILD_DIR }}/systemd/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.metasysd.outputs.tags }}
        labels: ${{ steps.metasysd.outputs.labels }}
        provenance: false
        platforms: ${{ matrix.platform }}

  ##
  # manifest_metadata: This job caluclates the tags and labels used to generate the final multi-arch manifest. Basically same tags as used in build step but without the arch in the name.
  manifest_metadata:
    runs-on: ubuntu-latest
    # Outputs define the variable that can be used in other jobs. These are strings, so JSON needs to be parsed with fromJson when read by other jobs.
    # The 'manifest' output is the metadata for the supervisord image and 'manifest_sysd' is the metadata for the systemd image.
    outputs:
      manifest: ${{ steps.manifest_meta.outputs.json }}
      manifest_sysd: ${{ steps.manifest_sysd_meta.outputs.json }}
    steps:
    - name: Extract Docker metadata for manifest
      id: manifest_meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}
        flavor: |
            latest=false
        tags: |
          type=schedule
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
    - name: Extract Docker metadata for systemd manifest
      id: manifest_sysd_meta
      uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_BASE }}
        flavor: |
            latest=false
        tags: |
          type=schedule,suffix=-systemd
          type=ref,event=branch,suffix=-systemd
          type=ref,event=tag,suffix=-systemd
          type=ref,event=pr,suffix=-systemd
          type=raw,value=systemd,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
  ##
  # create_manifest: This job creates the multi-arch manifest for the supervisord image. It uses the metadata from the manifest_metadata job to create the manifest.
  create_manifest:
    needs: 
      - build
      - manifest_metadata
    # Loop through each tag in the metadata created in the manifest_metadata job
    strategy:
      matrix:
        tags: ${{ fromJson(needs.manifest_metadata.outputs.manifest).tags }}
    runs-on: ubuntu-latest
    steps:
    # Login to registry
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # create and push the manifest
    - name: Create manifest
      run: |
        docker manifest create ${{ matrix.tags }} \
          ${{ matrix.tags }}-amd64 \
          ${{ matrix.tags }}-arm64
        docker manifest push ${{ matrix.tags }}

  ##
  # create_sysd_manifest: This job creates the multi-arch manifest for the systemd image. It uses the metadata from the manifest_metadata job to create the manifest.
  create_sysd_manifest:
    needs: 
      - build
      - manifest_metadata
    # Loop through each tag in the metadata created in the manifest_metadata job 
    strategy:
      matrix:
        tags: ${{ fromJson(needs.manifest_metadata.outputs.manifest_sysd).tags }}
    runs-on: ubuntu-latest
    steps:
    # Login to registry
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # create and push the manifest
    - name: Create manifest
      run: |
        docker manifest create ${{ matrix.tags }} \
          ${{ matrix.tags }}-amd64 \
          ${{ matrix.tags }}-arm64
        docker manifest push ${{ matrix.tags }}